from typing import Callable
from random import randint
import click


class Pizza:
    """ –ö–ª–∞—Å—Å –ø–∏—Ü—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    def __init__(self, name: str, size: str = 'L'):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–∏—Ü—Ü—ã, —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é L"""
        name = name.capitalize()
        if name not in ['Margherita', 'Pepperoni', 'Hawaiian']:
            raise ValueError('–¢–∞–∫–æ–π –ø–∏—Ü—Ü—ã –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
        if size not in ['L', 'XL']:
            raise ValueError('–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å L –∏–ª–∏ XL')

        self.name = name
        self.size = size

        if name == 'Margherita':
            self.name += ' üßÄ'
            self.recipe = dict.fromkeys(
                [self.name], ['tomato sauce', 'mozzarella', 'tomatoes']
            )

        if name == 'Pepperoni':
            self.name += ' üçï'
            self.recipe = dict.fromkeys(
                [self.name], ['tomato sauce', 'mozzarella', 'pepperoni']
            )

        if name == 'Hawaiian':
            self.name += ' üçç'
            self.recipe = dict.fromkeys(
                [self.name], ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']
            )

    def dict(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏"""
        recipe = ''
        for name, ingredients in self.recipe.items():
            recipe = f'{name}: ' + ', '.join(ingredient for ingredient in ingredients)
        return recipe

    def __str__(self):
        return f'{self.name} ({self.size})'

    def __eq__(self, other):
        """ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–∏—Ü—Ü """
        return self.size == other.size and self.name == other.name


def log(text: str) -> Callable:
    """–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    def wrapper(function: Callable) -> Callable:
        def decorator(*args, **kwargs):
            for pizza in args:
                print(pizza, end=' ')
            print(text.format(randint(5, 30)))
            function(*args, **kwargs)
        return decorator
    return wrapper


@log(': –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {} –º–∏–Ω—É—Ç!')
def bake(pizza: Pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""


@log(': üõµ –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {} –º–∏–Ω—É—Ç!')
def delivery(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""


@log(': üè† –∑–∞–±—Ä–∞–ª–∏ –∑–∞ {} –º–∏–Ω—É—Ç!')
def pickup(pizza: Pizza):
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""


@click.group()
def cli():
    pass


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    pizzas = [Pizza('Margherita'), Pizza('Pepperoni'), Pizza('Hawaiian')]
    for pizza in pizzas:
        print(f'- {pizza.dict()}')
    print('–†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã: L –∏–ª–∏ XL')


@cli.command()
@click.argument('pizza')
@click.argument('size', default='L')
@click.option('--delivery', is_flag=True, default=False)
def order(pizza: str, size: str, delivery: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    order_pizza = Pizza(pizza, size)
    print(order_pizza.__str__() + ':')
    if order_pizza.size == 'L':
        print('     –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 10 –º–∏–Ω—É—Ç')
    else:
        print('     –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 20 –º–∏–Ω—É—Ç')
    if delivery:
        print('     –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 30 –º–∏–Ω—É—Ç')


if __name__ == '__main__':
    cli()
